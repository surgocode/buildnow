{
    "componentChunkName": "component---node-modules-gatsby-theme-primer-wiki-src-templates-post-query-js",
    "path": "/Plugins/Note composer/",
    "result": {"data":{"mdx":{"id":"3446b104-be14-5bcb-8216-bbe93a9bff31","tableOfContents":{"items":[{"url":"#merge","title":"Merge"},{"url":"#extract","title":"Extract"},{"url":"#options","title":"Options"}]},"fields":{"title":"Note Composer","slug":"/Plugins/Note composer/","url":"https://buildtest.surgo.info/Plugins/Note composer/","editUrl":"https://github.com/surgocode/buildnow/tree/main/Plugins/Note composer.md","lastUpdatedAt":"2021-09-01T22:25:52.000Z","lastUpdated":"9/1/2021","gitCreatedAt":"2021-09-01T22:25:52.000Z","shouldShowTitle":true},"frontmatter":{"title":"","description":null,"imageAlt":null,"tags":[],"date":null,"dateModified":null,"language":null,"seoTitle":null,"image":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The Note composer plugin allows you to easily merge two note or extract part of a note into its own note.\"), mdx(\"h2\", {\n    \"id\": \"merge\"\n  }, \"Merge\"), mdx(\"p\", null, \"When working with the file, you can choose \\\"Merge entire file with...\\\" in the More Options menu.\"), mdx(\"p\", null, \"Alternatively, you can open \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Plugins/Command%20palette/\",\n    \"title\": \"Command palette\"\n  }, \"Command palette\"), \" and invoke the command \\\"Note composer: Merge current file with another file...\\\".\"), mdx(\"p\", null, \"This will bring up a menu to choose a file to merge into. Once you confirm the merge, all links to the current note will be updated to the merged file.\"), mdx(\"p\", null, \"The current note will be merged to the bottom by default; you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shift-Enter\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Enter\"), \" to merge it to the top.\"), mdx(\"h2\", {\n    \"id\": \"extract\"\n  }, \"Extract\"), mdx(\"p\", null, \"When selecting text, you can either right click on it, select \\\"Extract current selection\\\", or use the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Plugins/Command%20palette/\",\n    \"title\": \"Command palette\"\n  }, \"Command palette\"), \" to find the \\\"Note composer: Extract current selection...\\\" command.\"), mdx(\"p\", null, \"Similar to merging, this will bring up a menu to choose a file to extract into. If no result can be found, a new note will be created. If you want to create a new note instead of using the first result, press \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ctrl-Enter\"), \" (or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cmd-Enter\"), \" on macOS).\"), mdx(\"h2\", {\n    \"id\": \"options\"\n  }, \"Options\"), mdx(\"p\", null, \"Note Composer has a few helpful plugin options.\"), mdx(\"h3\", {\n    \"id\": \"text-after-moving\"\n  }, \"Text after moving\"), mdx(\"p\", null, \"After you extract a piece of text, it's often a good idea to leave a link to the new file. By default, a link is created. But you can also change this option to have an embed created for you, or insert nothing at all.\"), mdx(\"h3\", {\n    \"id\": \"template-file\"\n  }, \"Template file\"), mdx(\"p\", null, \"When merging or extracting, instead of just sending over the content, you can also apply a template file to it.\"), mdx(\"p\", null, \"This template file can contain the following variables:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"{{content}}\"), \": this is where the content will be placed. If you do not include this variable, the content will automatically be placed at the bottom of the template.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"{{fromTitle}}\"), \": the name of the note where the new note comes from.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"{{newTitle}}\"), \": the title of the new file. Convenient if you prefer to have a heading at the top of the file that's the same as the file name.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"{{date:FORMAT}}\"), \": you can add multiple dates with your custom format. For example, you can do \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"{{date:YYYY-MM-DD}}\"), \" and it will resolve to the date or time when the note gets created.\")), mdx(\"h3\", {\n    \"id\": \"confirm-file-merge\"\n  }, \"Confirm file merge\"), mdx(\"p\", null, \"Merging files will delete the file and is destructive, so by default we ask for your confirmation. If you prefer, you can choose to skip this confirmation.\"), mdx(\"p\", null, \"In case you accidentally merged something and want to get it back, consider using the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Plugins/File%20recovery/\",\n    \"title\": \"File recovery\"\n  }, \"File recovery\"), \" plugin to recover it.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"The Note composer plugin allows you to easily merge two note or extract part of a note into its own note.\n\n## Merge\n\nWhen working with the file, you can choose \"Merge entire file with...\" in the More Options menu.\n\nAlternatively, you can open [[Command palette]] and invoke the command \"Note composer: Merge current file with another file...\".\n\nThis will bring up a menu to choose a file to merge into. Once you confirm the merge, all links to the current note will be updated to the merged file.\n\nThe current note will be merged to the bottom by default; you can use `Shift-Enter` instead of `Enter` to merge it to the top.\n\n## Extract\n\nWhen selecting text, you can either right click on it, select \"Extract current selection\", or use the [[Command palette]] to find the \"Note composer: Extract current selection...\" command.\n\nSimilar to merging, this will bring up a menu to choose a file to extract into. If no result can be found, a new note will be created. If you want to create a new note instead of using the first result, press `Ctrl-Enter` (or `Cmd-Enter` on macOS).\n\n## Options\n\nNote Composer has a few helpful plugin options.\n\n### Text after moving\n\nAfter you extract a piece of text, it's often a good idea to leave a link to the new file. By default, a link is created. But you can also change this option to have an embed created for you, or insert nothing at all.\n\n### Template file\n\nWhen merging or extracting, instead of just sending over the content, you can also apply a template file to it.\n\nThis template file can contain the following variables:\n\n- `{{content}}`: this is where the content will be placed. If you do not include this variable, the content will automatically be placed at the bottom of the template.\n- `{{fromTitle}}`: the name of the note where the new note comes from.\n- `{{newTitle}}`: the title of the new file. Convenient if you prefer to have a heading at the top of the file that's the same as the file name.\n- `{{date:FORMAT}}`: you can add multiple dates with your custom format. For example, you can do `{{date:YYYY-MM-DD}}` and it will resolve to the date or time when the note gets created.\n\n### Confirm file merge\n\nMerging files will delete the file and is destructive, so by default we ask for your confirmation. If you prefer, you can choose to skip this confirmation.\n\nIn case you accidentally merged something and want to get it back, consider using the [[File recovery]] plugin to recover it.","excerpt":"The Note composer plugin allows you to easily merge two note or extract part of a note into its own note. Merge When working with the file,â€¦","outboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The Command Palette is enabled by default, as it is a very useful way to access nearly all the features of Obsidian without having to remember key strokes. Type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ctrl/Cmd+P\"), \" to activate, then simply type in the name of the command. If a command has a hotkey, it will appear in on the right side.\"), mdx(\"p\", null, \"Custom shorcuts can be added to the Command Palette in Settings => Hotkeys. Click on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*\"), \" icon to the right of each key listed and type whatever key combination you would like.\"), mdx(\"h3\", {\n    \"id\": \"settings\"\n  }, \"Settings\"), mdx(\"h4\", {\n    \"id\": \"pinned-commands\"\n  }, \"Pinned commands\"), mdx(\"p\", null, \"You can set a few pinned commands that will appear at top of the command palette. This lets you choose them without typing anything. It's a good place to put your most frequently used commands.\"), mdx(\"p\", null, \"Pinned commands are managed on the Command palette options screen under Plugin Options. You can add pinned commands by entering the name in the \\\"New pinned command\\\" field. After you pick a command and hit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Enter\"), \", the command will be added to the list above. You can reorder the list or delete existing pinned commands in the list.\"), mdx(\"h3\", {\n    \"id\": \"usage-tips\"\n  }, \"Usage tips\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To see a list of all commands along with their shortcut, don't type anything into the prompt. The arrow keys will move up and down the list, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Return\"), \" will activate the command. \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Search in the command palette is fuzzy, so you can type part of the word to get matches. For example, you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"trm\"), \" to search for \\\"Toggle read mode\\\".\"))));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/Plugins/Command palette/","title":"Command Palette","shouldShowTitle":true}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"File recovery is a core plugin to help you recover your data in case of all kind of accidents - user error, power outage, or misbehaving plugins and scripts.\"), mdx(\"p\", null, \"File recovery is default to enabled, because it's too late to enable when you've already lost data.\"), mdx(\"h2\", {\n    \"id\": \"how-it-works\"\n  }, \"How it works\"), mdx(\"h3\", {\n    \"id\": \"snapshots\"\n  }, \"Snapshots\"), mdx(\"p\", null, \"As long as this plugin is enabled, full snapshots of what you're working on get saved at fixed intervals (you can configure this interval). Snapshots get deleted after a fixed amount of retention time.\"), mdx(\"p\", null, \"This process is automatic. By default, snapshots are made every 5 minutes, and snapshots are kept for 7 days.\"), mdx(\"h3\", {\n    \"id\": \"recovering\"\n  }, \"Recovering\"), mdx(\"p\", null, \"In case of data loss, here's how you can find saved snapshots:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Open settings;\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Open the \\\"File recovery\\\" tab under \\\"Plugin options\\\";\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Click on the \\\"View\\\" button in \\\"Snapshots\\\" section;\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In the search bar on the left, enter the name of file you want to recover. If the file name does not show it, it means no snapshots were saved for that file;\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"After selecting a file in the dropdown, a list of snapshots will appear on the left. Select the one you want to recover;\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The content of that snapshot will show up on the right. You can click \\\"Copy to clipboard\\\" to copy the whole thing, or cherry-pick some of the content.\")), mdx(\"h2\", {\n    \"id\": \"options\"\n  }, \"Options\"), mdx(\"h3\", {\n    \"id\": \"snapshot-interval\"\n  }, \"Snapshot interval\"), mdx(\"p\", null, \"Minimal number of minutes between two snapshots. Default is 5 minutes.\"), mdx(\"h3\", {\n    \"id\": \"history-length\"\n  }, \"History length\"), mdx(\"p\", null, \"Number of days to keep snapshots around for. Default is 7 days.\"), mdx(\"h3\", {\n    \"id\": \"clear-history\"\n  }, \"Clear history\"), mdx(\"p\", null, \"You also have the option to wipe all history. ==Please be careful as this action is irreversible.==\"), mdx(\"h2\", {\n    \"id\": \"data-storage\"\n  }, \"Data storage\"), mdx(\"p\", null, \"The file recovery data is stored in [\", \"[How Obsidian stores data#System directory|system directory]\", \"] in case of vault malfunctioning.\"), mdx(\"p\", null, \"Please note that vaults are identified by their absolute path. If you've moved vault, you will need to move it back to its previous position in order to restore the snapshots while the vault was there.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/Plugins/File recovery/","title":"File Recovery","shouldShowTitle":true}}],"inboundReferences":[]},"tagsOutbound":{"nodes":[]}},"pageContext":{"tags":[],"slug":"/Plugins/Note composer/","sidebarItems":[{"title":"","items":[{"title":"Recently Updated","url":"/latest/","collapse":true,"indent":false,"items":[{"title":"12-09: Deleting Files Copy","url":"/ThisOne/Deleting files copy/"},{"title":"12-09: Deleting Files","url":"/ThisOne/Deleting files/"},{"title":"12-09: Accepted File Formats2222","url":"/AdvancedTopics2/Accepted file formats2222/"},{"title":"12-09: Contributing to Obsidian","url":"/AdvancedTopics2/Contributing to Obsidian/"},{"title":"12-09: Customizing CSS","url":"/AdvancedTopics2/Customizing CSS/"},{"title":"12-09: Deleting Files","url":"/AdvancedTopics2/Deleting files/"},{"title":"12-09: Drag and Drop","url":"/AdvancedTopics2/Drag and Drop/"},{"title":"12-09: HTML Sanitization","url":"/AdvancedTopics2/HTML sanitization/"},{"title":"12-09: How Obsidian Stores Data","url":"/AdvancedTopics2/How Obsidian stores data/"},{"title":"12-09: Insider Builds","url":"/AdvancedTopics2/Insider builds/"}]}]},{"title":"Tags","items":[]}],"tagsGroups":[],"latestPosts":[{"fields":{"slug":"/ThisOne/Deleting files copy/","title":"Deleting Files Copy","lastUpdatedAt":"2023-12-09T00:28:46.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/ThisOne/Deleting files/","title":"Deleting Files","lastUpdatedAt":"2023-12-09T00:12:59.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/AdvancedTopics2/Accepted file formats2222/","title":"Accepted File Formats2222","lastUpdatedAt":"2023-12-09T00:06:32.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/AdvancedTopics2/Contributing to Obsidian/","title":"Contributing to Obsidian","lastUpdatedAt":"2023-12-09T00:06:32.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/AdvancedTopics2/Customizing CSS/","title":"Customizing CSS","lastUpdatedAt":"2023-12-09T00:06:32.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/AdvancedTopics2/Deleting files/","title":"Deleting Files","lastUpdatedAt":"2023-12-09T00:06:32.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/AdvancedTopics2/Drag and Drop/","title":"Drag and Drop","lastUpdatedAt":"2023-12-09T00:06:32.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/AdvancedTopics2/HTML sanitization/","title":"HTML Sanitization","lastUpdatedAt":"2023-12-09T00:06:32.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/AdvancedTopics2/How Obsidian stores data/","title":"How Obsidian Stores Data","lastUpdatedAt":"2023-12-09T00:06:32.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/AdvancedTopics2/Insider builds/","title":"Insider Builds","lastUpdatedAt":"2023-12-09T00:06:32.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}}]}},
    "staticQueryHashes": ["2230547434","2320115945","3495835395","451533639"]}