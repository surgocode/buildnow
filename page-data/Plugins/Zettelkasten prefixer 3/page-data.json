{
    "componentChunkName": "component---node-modules-gatsby-theme-primer-wiki-src-templates-post-query-js",
    "path": "/Plugins/Zettelkasten prefixer 3/",
    "result": {"data":{"mdx":{"id":"be3576ea-1453-5d54-9190-f66e9b19db46","tableOfContents":{},"fields":{"title":"Zettelkasten Prefixer 3","slug":"/Plugins/Zettelkasten prefixer 3/","url":"https://buildtest.surgo.info/Plugins/Zettelkasten prefixer 3/","editUrl":"https://github.com/surgocode/buildnow/tree/main/Plugins/Zettelkasten prefixer 3.md","lastUpdatedAt":"2023-10-10T20:51:15.000Z","lastUpdated":"10/10/2023","gitCreatedAt":"2023-10-10T20:51:15.000Z","shouldShowTitle":true},"frontmatter":{"title":"","description":null,"imageAlt":null,"tags":[],"date":null,"dateModified":null,"language":null,"seoTitle":null,"image":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Adds a new button to the left pane, which can be used to create a new file and prefix it for you using the current time. This can be beneficial if you are a follower of the Zettelkasten UID-in-filename method.\"), mdx(\"p\", null, \"The default format is 12-digit timestamp, e.g. \\\"202001010000\\\".\"), mdx(\"h3\", {\n    \"id\": \"templates\"\n  }, \"Templates\"), mdx(\"p\", null, \"You can define a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Plugins/Templates/\",\n    \"title\": \"template file\"\n  }, \"template file\"), \" for your Zettelkasten notes. This file will be copied when a new Zettel note is created.\"), mdx(\"p\", null, \"For the Zettelkasten prefixer plugin, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{date}}\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{time}}\"), \" do not work. Please use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{date:YYYY-MM-DD}}\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{time:HH:mm}}\"), \" in your template.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"Adds a new button to the left pane, which can be used to create a new file and prefix it for you using the current time. This can be beneficial if you are a follower of the Zettelkasten UID-in-filename method.\n\nThe default format is 12-digit timestamp, e.g. \"202001010000\".\n\n### Templates\nYou can define a [[Templates|template file]] for your Zettelkasten notes. This file will be copied when a new Zettel note is created.\n\nFor the Zettelkasten prefixer plugin, `{{date}}` and `{{time}}` do not work. Please use `{{date:YYYY-MM-DD}}` and `{{time:HH:mm}}` in your template.\n","excerpt":"Adds a new button to the left pane, which can be used to create a new file and prefix it for you using the current time. This can be benefiâ€¦","outboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The Templates plugin lets you quickly insert snippets of text into your current note.\"), mdx(\"h3\", {\n    \"id\": \"set-up-template-folder\"\n  }, \"Set up template folder\"), mdx(\"p\", null, \"Each template snippet is just a normal Markdown note, like everything else in Obsidian.\"), mdx(\"p\", null, \"To designate template files, put them into a folder, and choose that folder in Settings => Templates => \\\"Template folder location\\\" after enabling the plugin\"), mdx(\"h3\", {\n    \"id\": \"insert-a-template\"\n  }, \"Insert a template\"), mdx(\"p\", null, \"After setting up the folder location, using the ribbon icon to insert the template. As always, you can also set a hotkey for this option, or use the command palette to access it.\"), mdx(\"p\", null, \"The template snippet will be inserted in the current caret position, with special text replaced by their actual value at the time of the insertion (see below).\"), mdx(\"h3\", {\n    \"id\": \"insert-title\"\n  }, \"Insert title\"), mdx(\"p\", null, \"If you want to insert the title of a note, you can set it in a template with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{title}}\"), \".\"), mdx(\"h3\", {\n    \"id\": \"insert-date-and-time\"\n  }, \"Insert date and time\"), mdx(\"p\", null, \"In the plugin settings of Template, you can also set a date format and a time format.\"), mdx(\"p\", null, \"After setting these formats, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{date}}\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{time}}\"), \" in the template files will be replaced by the formatting current time.\"), mdx(\"p\", null, \"For formatting syntax documentation, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://momentjs.com/docs/#/displaying/format/\"\n  }, \"please see here\"), \".\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Tip: if you want to have two date formats or two time formats, you can use the other \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"{{time}}\"), \" as the second \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"{{date}}\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"{{date}}\"), \" as the second \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"{{time}}\"), \".\")), mdx(\"h3\", {\n    \"id\": \"one-off-date-formats\"\n  }, \"One-off date formats\"), mdx(\"p\", null, \"In addition to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{date}}\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{time}}\"), \", which will work in all template files, you can also write \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{date:YYYY-MM-DD}}\"), \" to insert a date with a certain format just once. This will override the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{date}}\"), \" format. Anything after \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":\"), \" will be considered part of the date format.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{time:HH:mm}}\"), \" works similarly.\"), mdx(\"h3\", {\n    \"id\": \"using-custom-date-formats-elsewhere\"\n  }, \"Using custom date formats elsewhere\"), mdx(\"p\", null, \"Currently, dates like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{date:YYYY-MM-DD}}\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{time:HH:mm}}\"), \" also work in the template file of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Plugins/Daily%20notes/\",\n    \"title\": \"Daily notes\"\n  }, \"Daily notes\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Plugins/Zettelkasten%20prefixer/\",\n    \"title\": \"Zettelkasten prefixer\"\n  }, \"Zettelkasten prefixer\"), \" plugins. However, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{date}}\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{time}}\"), \" do not work yet.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/Plugins/Templates/","title":"Templates","shouldShowTitle":true}}],"inboundReferences":[]},"tagsOutbound":{"nodes":[]}},"pageContext":{"tags":[],"slug":"/Plugins/Zettelkasten prefixer 3/","sidebarItems":[{"title":"","items":[{"title":"Recently Updated","url":"/latest/","collapse":true,"indent":false,"items":[{"title":"12-09: Deleting Files Copy","url":"/ThisOne/Deleting files copy/"},{"title":"12-09: Deleting Files","url":"/ThisOne/Deleting files/"},{"title":"12-09: Accepted File Formats2222","url":"/AdvancedTopics2/Accepted file formats2222/"},{"title":"12-09: Contributing to Obsidian","url":"/AdvancedTopics2/Contributing to Obsidian/"},{"title":"12-09: Customizing CSS","url":"/AdvancedTopics2/Customizing CSS/"},{"title":"12-09: Deleting Files","url":"/AdvancedTopics2/Deleting files/"},{"title":"12-09: Drag and Drop","url":"/AdvancedTopics2/Drag and Drop/"},{"title":"12-09: HTML Sanitization","url":"/AdvancedTopics2/HTML sanitization/"},{"title":"12-09: How Obsidian Stores Data","url":"/AdvancedTopics2/How Obsidian stores data/"},{"title":"12-09: Insider Builds","url":"/AdvancedTopics2/Insider builds/"}]}]},{"title":"Tags","items":[]}],"tagsGroups":[],"latestPosts":[{"fields":{"slug":"/ThisOne/Deleting files copy/","title":"Deleting Files Copy","lastUpdatedAt":"2023-12-09T00:28:46.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/ThisOne/Deleting files/","title":"Deleting Files","lastUpdatedAt":"2023-12-09T00:12:59.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/AdvancedTopics2/Accepted file formats2222/","title":"Accepted File Formats2222","lastUpdatedAt":"2023-12-09T00:06:32.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/AdvancedTopics2/Contributing to Obsidian/","title":"Contributing to Obsidian","lastUpdatedAt":"2023-12-09T00:06:32.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/AdvancedTopics2/Customizing CSS/","title":"Customizing CSS","lastUpdatedAt":"2023-12-09T00:06:32.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/AdvancedTopics2/Deleting files/","title":"Deleting Files","lastUpdatedAt":"2023-12-09T00:06:32.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/AdvancedTopics2/Drag and Drop/","title":"Drag and Drop","lastUpdatedAt":"2023-12-09T00:06:32.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/AdvancedTopics2/HTML sanitization/","title":"HTML Sanitization","lastUpdatedAt":"2023-12-09T00:06:32.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/AdvancedTopics2/How Obsidian stores data/","title":"How Obsidian Stores Data","lastUpdatedAt":"2023-12-09T00:06:32.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/AdvancedTopics2/Insider builds/","title":"Insider Builds","lastUpdatedAt":"2023-12-09T00:06:32.000Z","lastUpdated":"12/9/2023"},"frontmatter":{"draft":false,"tags":[]}}]}},
    "staticQueryHashes": ["2230547434","2320115945","3495835395","451533639"]}